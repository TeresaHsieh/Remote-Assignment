{"version":3,"sources":["App.js","serviceWorker.js","index.js","new_menu.svg"],"names":["Header","props","react_default","a","createElement","className","App_Button","click","sidebarClickHandler","Button","onClick","id","type","src","new_menu","width","height","CloseButton","Sidebar","App_CloseButton","onClose","href","Welcome","state","title","this","setState","changeTitle","bind","React","Component","SectionTitle","BoxContainer","Footer","showResults","value","showMoreBox","App_SecondContainer","SecondContainer","App","sideBarOpen","sidebarToggleClickHandler","_this4","prevState","closeButtonClickHandler","style","App_Header","App_Sidebar","App_Welcome","App_SectionTitle","App_BoxContainer","App_Footer","ReactDOM","render","App_App","document","getElementById","Boolean","window","location","hostname","match","src_App","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.10fc2bde.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './week4react.css';\nimport new_menu from './new_menu.svg';\n\nconst Header = props => {\n  return (\n    <header className=\"main-header\">\n      <h3 className=\"name\">Website Title / Logo</h3>\n      <div>\n       <ul className=\"main-nav\">\n        <li>Item 1</li>\n         <li>Item 2</li>\n         <li>Item 3</li>\n         <li>Item 4</li>\n       </ul>\n       <Button click={props.sidebarClickHandler} />\n     </div>\n    </header>\n  );\n}\n\nconst Button = props => {\n  return (\n    <div onClick={props.click}>\n      <input id=\"button\" type=\"image\" src={new_menu} width=\"45px\"\n        height=\"45px\" />\n    </div>\n  );\n}\n\nconst CloseButton = props => {\n  return (\n    <div onClick={props.click}>\n      <button  className=\"closebtn\" > × </button>\n    </div>\n  );\n}\n\n\nconst Sidebar = props => {\n  return (\n    <div id=\"mySidebar\" className=\"sidebar\">\n      <CloseButton click={props.onClose}/>\n      {/* <a href=\"javascript:void(0)\" className=\"closebtn\" > × </a> */}\n      <ul>\n        <a href=\"#\">Item 1</a>\n        <a href=\"#\">Item 2</a>\n        <a href=\"#\">Item 3</a>\n        <a href=\"#\">Item 4</a>\n      </ul>\n    </div>\n  );\n}\n\n\nclass Welcome extends React.Component {\n  state = {\n    title: \"Website Title\"\n  };\n\n  changeTitle() {\n    this.setState({ title: \"Have a Good Time!\" });\n  };\n\n  render() {\n    return <h1 className=\"welcome\" onClick={this.changeTitle.bind(this)}>{this.state.title}</h1>;\n  }\n}\n\n\nconst SectionTitle = () => {\n  return (\n    <div className=\"section-title\">\n      <h3>Section Title</h3>\n    </div>\n  );\n}\n\nconst BoxContainer = () => {\n  return (\n    <div className=\"box-container\">\n      <div className=\"box 1\">\n        <p>Content Box 1</p>\n      </div>\n      <div className=\"box 2\">\n        <p>Content Box 2</p>\n      </div>\n      <div className=\"box 3\">\n        <p>Content Box 3</p>\n      </div>\n      <div className=\"box 4\">\n        <p>Content Box 4</p>\n      </div>\n    </div>\n  );\n}\n\n\nclass Footer extends React.Component {\n  state = {\n    showResults: false\n  };\n\n  showMoreBox() {\n    this.setState({ showResults: true });\n  };\n\n  render() {\n    return <div>\n      <footer className=\"footer\">\n\n        <div id=\"ctadiv\" />\n        <input className=\"cta\" type=\"submit\" value=\"Call to action\" onClick={this.showMoreBox.bind(this)} />\n        {this.state.showResults ? <SecondContainer /> : null}\n      </footer>\n    </div>\n  }\n}\n\nclass SecondContainer extends React.Component {\n  state = {\n    showResults: false\n  };\n\n  onClick() {\n    this.setState({ showResults: true });\n  };\n\n  render() {\n    return (\n      // <div id=\"results\" className=\"search-results\">\n      <div id=\"morebox\" className=\"second-container\" >\n\n        <div className=\"secondbox 5\">\n          <p>Content Box 5</p>\n        </div>\n        <div className=\"secondbox 6\">\n          <p>Content Box 6</p>\n        </div>\n        <div className=\"secondbox 7\">\n          <p>Content Box 7</p>\n        </div>\n        <div className=\"secondbox 8\">\n          <p>Content Box 8</p>\n        </div>\n      </div>\n      // </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  state = {\n    sideBarOpen: false,\n  }\n\n  sidebarToggleClickHandler = () => {\n    this.setState((prevState) => {\n      return { sideBarOpen: !prevState.sideBarOpen }\n    })\n  };\n\n  closeButtonClickHandler = () => {\n    this.setState({ sideBarOpen: false });\n  }\n\n  render() {\n    let {sideBarOpen} = this.state;\n    // if (sideBarOpen) {\n    //   sidebar = <Sidebar />;\n    //   closeButton = <CloseButton click={this.closeButtonClickHandler} />\n      \n    // }\n    return (\n      <div className=\"week4\" style={{ height: \"100%\" }}>\n        <Header sidebarClickHandler={this.sidebarToggleClickHandler}/>\n        { sideBarOpen? \n        (<div>\n          <Sidebar onClose={this.closeButtonClickHandler}/>\n        </div>) : \n        null }\n        <Welcome />\n        <SectionTitle />\n        <BoxContainer />\n        <Footer />\n        {/* <SecondContainer /> */}\n      </div>\n    );\n  }\n}\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/new_menu.51f8f52c.svg\";"],"sourceRoot":""}